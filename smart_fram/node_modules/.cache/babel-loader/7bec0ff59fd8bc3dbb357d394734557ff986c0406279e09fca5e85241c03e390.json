{"ast":null,"code":"export const fetchProducts = createAsyncThunk(\"fruit/fetchProducts\",\n// Fixed name\nasync () => {\n  const response = await axios.get(\"http://localhost:8000/api/products/fruits\");\n  console.log(response.data); // Debugging API response\n  return response.data; // Adjust based on actual response\n});\nconst FruitSlice = createSlice({\n  name: \"fruit\",\n  initialState: {\n    products: [],\n    status: \"idle\",\n    error: null\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProducts.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchProducts.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.products = action.payload; // Adjust based on actual response structure\n    }).addCase(fetchProducts.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    });\n  }\n});","map":{"version":3,"names":["fetchProducts","createAsyncThunk","response","axios","get","console","log","data","FruitSlice","createSlice","name","initialState","products","status","error","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message"],"sources":["C:/Users/mfrap/OneDrive/Desktop/FramFlo/smart_fram/src/ProductSlice/FruiteSlice.jsx"],"sourcesContent":["export const fetchProducts = createAsyncThunk(\r\n  \"fruit/fetchProducts\", // Fixed name\r\n  async () => {\r\n    const response = await axios.get(\r\n      \"http://localhost:8000/api/products/fruits\"\r\n    );\r\n    console.log(response.data); // Debugging API response\r\n    return response.data; // Adjust based on actual response\r\n  }\r\n);\r\n\r\nconst FruitSlice = createSlice({\r\n  name: \"fruit\",\r\n  initialState: {\r\n    products: [],\r\n    status: \"idle\",\r\n    error: null,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchProducts.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchProducts.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.products = action.payload; // Adjust based on actual response structure\r\n      })\r\n      .addCase(fetchProducts.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAGC,gBAAgB,CAC3C,qBAAqB;AAAE;AACvB,YAAY;EACV,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC9B,2CACF,CAAC;EACDC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;EAC5B,OAAOL,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CACF,CAAC;AAED,MAAMC,UAAU,GAAGC,WAAW,CAAC;EAC7BC,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACjB,aAAa,CAACkB,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACjB,aAAa,CAACoB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACN,MAAM,GAAG,WAAW;MAC1BM,KAAK,CAACP,QAAQ,GAAGS,MAAM,CAACC,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC,CACDL,OAAO,CAACjB,aAAa,CAACuB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACP,KAAK,CAACU,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}