{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Fetch products from API\nexport const fetchProducts = createAsyncThunk(\"fruit/fetchProducts\",\n// Action type\nasync () => {\n  try {\n    const response = await axios.get(\"http://localhost:8000/api/products/fruits\");\n    console.log(response.data); // Debugging API response\n    return response.data; // The payload contains a `Data` property\n  } catch (error) {\n    throw new Error(\"Failed to fetch products\");\n  }\n});\nconst FruitSlice = createSlice({\n  name: \"fruit\",\n  initialState: {\n    products: [],\n    // Array to store fetched products\n    status: \"idle\",\n    // idle | loading | succeeded | failed\n    error: null // For handling errors\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchProducts.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchProducts.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.products = action.payload.Data; // Access `Data` key to get the array\n    }).addCase(fetchProducts.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport default FruitSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchProducts","response","get","console","log","data","error","Error","FruitSlice","name","initialState","products","status","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","Data","rejected","message","reducer"],"sources":["C:/Users/mfrap/OneDrive/Desktop/FramFlo/smart_fram/src/ProductSlice/FruitSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n// Fetch products from API\r\nexport const fetchProducts = createAsyncThunk(\r\n  \"fruit/fetchProducts\", // Action type\r\n  async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        \"http://localhost:8000/api/products/fruits\"\r\n      );\r\n      console.log(response.data); // Debugging API response\r\n      return response.data; // The payload contains a `Data` property\r\n    } catch (error) {\r\n      throw new Error(\"Failed to fetch products\");\r\n    }\r\n  }\r\n);\r\n\r\nconst FruitSlice = createSlice({\r\n  name: \"fruit\",\r\n  initialState: {\r\n    products: [], // Array to store fetched products\r\n    status: \"idle\", // idle | loading | succeeded | failed\r\n    error: null, // For handling errors\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchProducts.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchProducts.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.products = action.payload.Data; // Access `Data` key to get the array\r\n      })\r\n      .addCase(fetchProducts.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default FruitSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,qBAAqB;AAAE;AACvB,YAAY;EACV,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAC9B,2CACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAC5B,OAAOJ,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;AACF,CACF,CAAC;AAED,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAC7BY,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,QAAQ,EAAE,EAAE;IAAE;IACdC,MAAM,EAAE,MAAM;IAAE;IAChBN,KAAK,EAAE,IAAI,CAAE;EACf,CAAC;EACDO,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,aAAa,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACL,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDG,OAAO,CAACf,aAAa,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACL,MAAM,GAAG,WAAW;MAC1BK,KAAK,CAACN,QAAQ,GAAGQ,MAAM,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,CACDN,OAAO,CAACf,aAAa,CAACsB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACL,MAAM,GAAG,QAAQ;MACvBK,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACb,KAAK,CAACiB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAef,UAAU,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}