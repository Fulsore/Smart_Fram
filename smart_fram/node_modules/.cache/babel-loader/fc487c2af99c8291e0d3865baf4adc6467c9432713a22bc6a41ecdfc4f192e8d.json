{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Fetch products from API 1\nexport const fetchProductsAPI1 = createAsyncThunk(\"smartStore/fetchProductsAPI1\", async () => {\n  const response = await axios.get(\"http://127.0.0.1:8000/api/products/\");\n  return response.data; // Assumes response is directly an array or an object with a products key\n});\n\n// Fetch products from API 2\nexport const fetchProductsAPI2 = createAsyncThunk(\"smartStore/fetchProductsAPI2\", async () => {\n  const response = await axios.get(\"http://127.0.0.1:8000/api/products/Vegetable/\");\n  return response.data; // Assumes response is directly an array or an object with a products key\n});\nconst smartStoreSlice = createSlice({\n  name: \"smartStore\",\n  initialState: {\n    itemsAPI1: [],\n    itemsAPI2: [],\n    statusAPI1: \"idle\",\n    // 'idle' | 'loading' | 'succeeded' | 'failed'\n    statusAPI2: \"idle\",\n    errorAPI1: null,\n    errorAPI2: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Handle API 1\n    .addCase(fetchProductsAPI1.pending, state => {\n      state.statusAPI1 = \"loading\";\n    }).addCase(fetchProductsAPI1.fulfilled, (state, action) => {\n      console.log(\"API1 Response:\", action.payload); // Log API1 response\n      state.statusAPI1 = \"succeeded\";\n      state.itemsAPI1 = Array.isArray(action.payload) ? action.payload : action.payload.products || []; // Check if response is an array or has a 'products' key\n    }).addCase(fetchProductsAPI1.rejected, (state, action) => {\n      state.statusAPI1 = \"failed\";\n      state.errorAPI1 = action.error.message;\n    })\n    // Handle API 2\n    .addCase(fetchProductsAPI2.pending, state => {\n      state.statusAPI2 = \"loading\";\n    }).addCase(fetchProductsAPI2.fulfilled, (state, action) => {\n      console.log(\"API2 Response:\", action.payload); // Log API2 response\n      state.statusAPI2 = \"succeeded\";\n      state.itemsAPI2 = Array.isArray(action.payload) ? action.payload : action.payload.products || []; // Check if response is an array or has a 'products' key\n    }).addCase(fetchProductsAPI2.rejected, (state, action) => {\n      state.statusAPI2 = \"failed\";\n      state.errorAPI2 = action.error.message;\n    });\n  }\n});\nexport default smartStoreSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchProductsAPI1","response","get","data","fetchProductsAPI2","smartStoreSlice","name","initialState","itemsAPI1","itemsAPI2","statusAPI1","statusAPI2","errorAPI1","errorAPI2","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","console","log","payload","Array","isArray","products","rejected","error","message","reducer"],"sources":["C:/Users/mfrap/OneDrive/Desktop/FramFlo/smart_fram/src/ProductSlice/smartStoreSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n// Fetch products from API 1\r\nexport const fetchProductsAPI1 = createAsyncThunk(\r\n  \"smartStore/fetchProductsAPI1\",\r\n  async () => {\r\n    const response = await axios.get(\"http://127.0.0.1:8000/api/products/\");\r\n    return response.data; // Assumes response is directly an array or an object with a products key\r\n  }\r\n);\r\n\r\n// Fetch products from API 2\r\nexport const fetchProductsAPI2 = createAsyncThunk(\r\n  \"smartStore/fetchProductsAPI2\",\r\n  async () => {\r\n    const response = await axios.get(\r\n      \"http://127.0.0.1:8000/api/products/Vegetable/\"\r\n    );\r\n    return response.data; // Assumes response is directly an array or an object with a products key\r\n  }\r\n);\r\n\r\nconst smartStoreSlice = createSlice({\r\n  name: \"smartStore\",\r\n  initialState: {\r\n    itemsAPI1: [],\r\n    itemsAPI2: [],\r\n    statusAPI1: \"idle\", // 'idle' | 'loading' | 'succeeded' | 'failed'\r\n    statusAPI2: \"idle\",\r\n    errorAPI1: null,\r\n    errorAPI2: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Handle API 1\r\n      .addCase(fetchProductsAPI1.pending, (state) => {\r\n        state.statusAPI1 = \"loading\";\r\n      })\r\n      .addCase(fetchProductsAPI1.fulfilled, (state, action) => {\r\n        console.log(\"API1 Response:\", action.payload); // Log API1 response\r\n        state.statusAPI1 = \"succeeded\";\r\n        state.itemsAPI1 = Array.isArray(action.payload)\r\n          ? action.payload\r\n          : action.payload.products || []; // Check if response is an array or has a 'products' key\r\n      })\r\n      .addCase(fetchProductsAPI1.rejected, (state, action) => {\r\n        state.statusAPI1 = \"failed\";\r\n        state.errorAPI1 = action.error.message;\r\n      })\r\n      // Handle API 2\r\n      .addCase(fetchProductsAPI2.pending, (state) => {\r\n        state.statusAPI2 = \"loading\";\r\n      })\r\n      .addCase(fetchProductsAPI2.fulfilled, (state, action) => {\r\n        console.log(\"API2 Response:\", action.payload); // Log API2 response\r\n        state.statusAPI2 = \"succeeded\";\r\n        state.itemsAPI2 = Array.isArray(action.payload)\r\n          ? action.payload\r\n          : action.payload.products || []; // Check if response is an array or has a 'products' key\r\n      })\r\n      .addCase(fetchProductsAPI2.rejected, (state, action) => {\r\n        state.statusAPI2 = \"failed\";\r\n        state.errorAPI2 = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default smartStoreSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAC/C,8BAA8B,EAC9B,YAAY;EACV,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,qCAAqC,CAAC;EACvE,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGN,gBAAgB,CAC/C,8BAA8B,EAC9B,YAAY;EACV,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAC9B,+CACF,CAAC;EACD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CACF,CAAC;AAED,MAAME,eAAe,GAAGR,WAAW,CAAC;EAClCS,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,MAAM;IAAE;IACpBC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,IAAI;IACfC,SAAS,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IAAA,CACCC,OAAO,CAACjB,iBAAiB,CAACkB,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACT,UAAU,GAAG,SAAS;IAC9B,CAAC,CAAC,CACDO,OAAO,CAACjB,iBAAiB,CAACoB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC;MAC/CL,KAAK,CAACT,UAAU,GAAG,WAAW;MAC9BS,KAAK,CAACX,SAAS,GAAGiB,KAAK,CAACC,OAAO,CAACL,MAAM,CAACG,OAAO,CAAC,GAC3CH,MAAM,CAACG,OAAO,GACdH,MAAM,CAACG,OAAO,CAACG,QAAQ,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC,CAAC,CACDV,OAAO,CAACjB,iBAAiB,CAAC4B,QAAQ,EAAE,CAACT,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACT,UAAU,GAAG,QAAQ;MAC3BS,KAAK,CAACP,SAAS,GAAGS,MAAM,CAACQ,KAAK,CAACC,OAAO;IACxC,CAAC;IACD;IAAA,CACCb,OAAO,CAACb,iBAAiB,CAACc,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACR,UAAU,GAAG,SAAS;IAC9B,CAAC,CAAC,CACDM,OAAO,CAACb,iBAAiB,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC;MAC/CL,KAAK,CAACR,UAAU,GAAG,WAAW;MAC9BQ,KAAK,CAACV,SAAS,GAAGgB,KAAK,CAACC,OAAO,CAACL,MAAM,CAACG,OAAO,CAAC,GAC3CH,MAAM,CAACG,OAAO,GACdH,MAAM,CAACG,OAAO,CAACG,QAAQ,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC,CAAC,CACDV,OAAO,CAACb,iBAAiB,CAACwB,QAAQ,EAAE,CAACT,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACR,UAAU,GAAG,QAAQ;MAC3BQ,KAAK,CAACN,SAAS,GAAGQ,MAAM,CAACQ,KAAK,CAACC,OAAO;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAezB,eAAe,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}